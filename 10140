#include<bits/stdc++.h>
using namespace std;
#define M 50000
#define pb push_back
void sieve(vector<int>& vect)
{
    vect[0]=0,vect[1]=0;
    for(long long int i=2;i<=M;i++)
    {
        long long int j = i;
        long long int temp = j*i;
        while(temp <= M)
        {
            vect[temp] = 0;
            j++;
            temp = j*i;
        }
    }
}
void markprime(vector<int>& prim,vector<int>vect,long long int n,long long int m)
{
    for(int i=2;i<=50000;i++)
    {
        if(vect[i]==1)
        {
            long long int j;
            if(m%i) j=m/i+1;
            else j=m/i;
            if(j<i) j=i;
            long long int temp =j*i;
            while(temp<=n)
            {
                prim[temp-m]=0;
                j++;temp=j*i;
            }
        }
    }
    if (m==1) prim[0]=0;
}
void countpr(vector<long long int>&prdis,vector<int>prim,long long int m)
{
    for(int i=0;i<prim.size();i++)
    {
        if(prim[i]) prdis.push_back(m+i);
    }
}
int main()
{
    vector<int>vect(M+1,1);sieve(vect);
    long long int m,n;
    while(cin>>m>>n){
    vector<int>prim(n-m+1,1);
    markprime(prim,vect,n,m);
    vector<long long int>prdis;
    countpr(prdis,prim,m);
    if(prdis.size()<2) cout<<"There are no adjacent primes."<<endl;
    else
    {
        long long int mii=1000001,maa=0,a=0,b=0,c=0,d=0;
        for(int i=0;i<prdis.size()-1;i++)
        {
            long long int dif=prdis[i+1]-prdis[i];
            if(dif<mii){mii=dif;a=prdis[i];b=prdis[i+1];}
            if(dif>maa){maa=dif;c=prdis[i];d=prdis[i+1];}
        }
    printf("%lld,%lld are closest, %lld,%lld are most distant.\n",a,b,c,d);
    }
    }
    return 0;
}
