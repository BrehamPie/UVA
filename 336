#include<bits/stdc++.h>
#define pb push_back
using namespace std;
vector<string>stt;
multimap<int,int>adj;
int BFS(int sorce,int ed)
{
    map<int,bool>visited;
    map<int,int>dist;
    multimap<int,int>::iterator i;
    for (i = adj.begin(); i != adj.end();i = adj.upper_bound(i->first))
        {
        visited[i->first] = false;
        dist[i->first]= -1;
        }
    queue<int>qq;
    qq.push(sorce);
    visited[sorce]=true;
    dist[sorce]=0;
    while(!qq.empty())
    {
        int v=qq.front();
        qq.pop();
        pair<multimap<int,int>::iterator,multimap<int,int>::iterator>val;
        val=adj.equal_range(v);
        for(i = val.first; i != val.second; i++) {
            if (visited[i->second]) continue;
            qq.push(i->second);
            visited[i->second] = true;
            dist[i->second]=dist[v]+1;
        }
    }
    map<int,int>::iterator it;
    int ans=0;
    for(it=dist.begin();it!=dist.end();it++)
    {
        if(it->second>ed ||it->second<0)ans++;
    }
    return ans;


}
int main()
{
    int n,cas=1;
    while(cin>>n && n)
    {
        adj.clear();
        for(int i=0;i<n;i++)
        {
            int a,b;cin>>a>>b;
            adj.insert(make_pair(a,b));
            adj.insert(make_pair(b,a));
        }
        int p,q;
        while(cin>>p>>q)
        {if(!p && !q) break;printf("Case %d: %d nodes not reachable from node %d with TTL = %d.\n",cas++,BFS(p,q),p,q);}
    }
    return 0;
}
